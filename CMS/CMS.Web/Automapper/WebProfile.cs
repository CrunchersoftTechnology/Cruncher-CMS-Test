using AutoMapper;
using CMS.Common;
using CMS.Common.Helpers;
using CMS.Domain.Storage.Projections;
using CMS.Web.ViewModels;

namespace CMS.Web.Automapper
{
    public class WebProfile : Profile
    {
        public WebProfile()
        {
            CreateMap<ClassProjection, ClassViewModel>()
               .ForMember(dest => dest.ClientId, opts => opts.MapFrom(src => src.ClientId))
                .ForMember(dest => dest.ClientName, opts => opts.MapFrom(src => src.ClientName))
                .ForMember(dest => dest.ClassId, opts => opts.MapFrom(src => src.ClassId))
                .ForMember(dest => dest.Name, opts => opts.MapFrom(src => src.Name))
                .ForMember(dest => dest.CurrentUserRole, y => y.Ignore())
                .ForMember(dest => dest.Clients, y => y.Ignore());


            CreateMap<ChapterProjection, ChapterViewModel>()
                .ForMember(dest => dest.ChapterId, opts => opts.MapFrom(src => src.ChapterId))
                .ForMember(dest => dest.SubjectId, opts => opts.MapFrom(src => src.SubjectId))
                .ForMember(dest => dest.Name, opts => opts.MapFrom(src => src.ChapterName))
                .ForMember(dest => dest.Weightage, opts => opts.MapFrom(src => src.Weightage))
                .ForMember(dest => dest.SubjectName, opts => opts.MapFrom(src => src.SubjectName))
                .ForMember(dest => dest.ClassId, opts => opts.MapFrom(src => src.ClassId))
                .ForMember(dest => dest.ClassName, opts => opts.MapFrom(src => src.ClassName))
                .ForMember(x => x.Subjects, y => y.Ignore())
                .ForMember(x => x.Classes, y => y.Ignore())
                .ForMember(dest => dest.CurrentUserRole, y => y.Ignore())
                .ForMember(dest => dest.Clients, y => y.Ignore());

            CreateMap<BatchProjection, BatchViewModel>()
                .ForMember(dest => dest.BatchId, opts => opts.MapFrom(src => src.BatchId))
                .ForMember(dest => dest.InTime, opts => opts.MapFrom(src => src.InTime.ToString(Constants.TimeFormat)))
                .ForMember(dest => dest.OutTime, opts => opts.MapFrom(src => src.OutTime.ToString(Constants.TimeFormat)))
                .ForMember(dest => dest.Name, opts => opts.MapFrom(src => src.BatchName))
                .ForMember(dest => dest.ClassId, opts => opts.MapFrom(src => src.ClassId))
                .ForMember(dest => dest.ClassName, opts => opts.MapFrom(src => src.ClassName))
                .ForMember(x => x.Classes, y => y.Ignore())
                 .ForMember(dest => dest.CurrentUserRole, y => y.Ignore())
                .ForMember(dest => dest.Clients, y => y.Ignore());

            CreateMap<SubjectProjection, SubjectViewModel>()
                .ForMember(dest => dest.ClientId, opts => opts.MapFrom(src => src.ClientId))
                .ForMember(dest => dest.ClientName, opts => opts.MapFrom(src => src.ClientName))
                .ForMember(dest => dest.SubjectId, opts => opts.MapFrom(src => src.SubjectId))
                .ForMember(dest => dest.ClassId, opts => opts.MapFrom(src => src.ClassId))
                .ForMember(dest => dest.Name, opts => opts.MapFrom(src => src.Name))
                .ForMember(dest => dest.ClassName, opts => opts.MapFrom(src => src.ClassName))
                .ForMember(x => x.Classes, y => y.Ignore())
                .ForMember(dest => dest.SelectedClasses, opts => opts.MapFrom(src => src.SelectedClasses))
              .ForMember(dest => dest.CurrentUserRole, y => y.Ignore())
                .ForMember(dest => dest.Clients, y => y.Ignore());

            CreateMap<BoardProjection, BoardViewModel>()
            .ForMember(dest => dest.ClientId, opts => opts.MapFrom(src => src.ClientId))
                .ForMember(dest => dest.ClientName, opts => opts.MapFrom(src => src.ClientName))
                .ForMember(dest => dest.BoardId, opts => opts.MapFrom(src => src.BoardId))
                .ForMember(dest => dest.Name, opts => opts.MapFrom(src => src.Name))
                .ForMember(dest => dest.CurrentUserRole, y => y.Ignore())
                .ForMember(dest => dest.Clients, y => y.Ignore());


            CreateMap<InstallmentProjection, InstallmentViewModel>()
                .ForMember(dest => dest.InstallmentId, opts => opts.MapFrom(src => src.InstallmentId))
                .ForMember(dest => dest.UserId, opts => opts.MapFrom(src => src.UserId))
                .ForMember(dest => dest.StudentName, opts => opts.MapFrom(src => string.Format("{0} {1} {2}", src.FirstName, src.MiddleName, src.LastName)))
                .ForMember(dest => dest.RemainingFee, opts => opts.MapFrom(src => src.RemainingFee))
                .ForMember(dest => dest.TotalFee, opts => opts.MapFrom(src => src.TotalFee))
                .ForMember(dest => dest.Payment, opts => opts.MapFrom(src => src.Payment))
                .ForMember(dest => dest.CreatedOn, opts => opts.MapFrom(src => src.CreatedOn))
                .ForMember(dest => dest.ClassId, opts => opts.MapFrom(src => src.ClassId))
                .ForMember(dest => dest.ClassName, opts => opts.MapFrom(src => src.ClassName))
                .ForMember(dest => dest.FinalFee, opts => opts.MapFrom(src => src.FinalFee))
                .ForMember(dest => dest.ReceiptBookNumber, opts => opts.MapFrom(src => src.ReceiptBookNumber))
                .ForMember(dest => dest.ReceiptNumber, opts => opts.MapFrom(src => src.ReceiptNumber))
                .ForMember(dest => dest.BranchId, opts => opts.MapFrom(src => src.BranchId))
                .ForMember(dest => dest.BranchName, opts => opts.MapFrom(src => src.BranchName))
                .ForMember(x => x.ParentContact, opts => opts.MapFrom(src => src.ParentContact))
                .ForMember(x => x.StudentContact, opts => opts.MapFrom(src => src.StudentContact))
                .ForMember(x => x.ParentAppPlayerId, opts => opts.MapFrom(src => src.ParentAppPlayerId))
                .ForMember(x => x.Email, opts => opts.MapFrom(src => src.Email))
                .ForMember(x => x.StudBatch, opts => opts.MapFrom(src => src.StudBatch))
                .ForMember(x => x.StudentBatches, opts => opts.MapFrom(src => src.StudentSubjects))
                .ForMember(x => x.Branches, y => y.Ignore())
                .ForMember(x => x.Students, y => y.Ignore())
                .ForMember(x => x.Classes, y => y.Ignore())
                .ForMember(x => x.CurrentUserRole, y => y.Ignore())
                .ForMember(x => x.EmailSend, y => y.Ignore())
                .ForMember(x => x.SMS, y => y.Ignore())
                .ForMember(x => x.AppNotification, y => y.Ignore())
                .ForMember(x => x.RemainingFeeFinal, y => y.Ignore())
                .ForMember(x => x.InstallmentNo, y => y.Ignore())
                .ForMember(x => x.Clients, y => y.Ignore());

            CreateMap<MasterFeeProjection, MasterFeeViewModel>()
                .ForMember(dest => dest.MasterFeeId, opts => opts.MapFrom(src => src.MasterFeeId))
                .ForMember(dest => dest.SubjectId, opts => opts.MapFrom(src => src.SubjectId))
                .ForMember(dest => dest.ClassId, opts => opts.MapFrom(src => src.ClassId))
                .ForMember(dest => dest.Year, opts => opts.MapFrom(src => src.Year))
                .ForMember(dest => dest.Fee, opts => opts.MapFrom(src => src.Fee))
                .ForMember(dest => dest.ClassName, opts => opts.MapFrom(src => src.ClassName))
                .ForMember(dest => dest.SubjectName, opts => opts.MapFrom(src => src.SubjectName))
                .ForMember(x => x.Classes, y => y.Ignore())
                .ForMember(x => x.Subjects, y => y.Ignore())
                .ForMember(dest => dest.CurrentUserRole, y => y.Ignore())
                .ForMember(dest => dest.Clients, y => y.Ignore());

            CreateMap<StudentProjection, StudentViewModel>()
                .ForMember(x => x.BatchId, opts => opts.MapFrom(src => src.BatchId))
                 .ForMember(x => x.ClientId, opts => opts.MapFrom(src => src.ClientId))
                  .ForMember(x => x.ClientName, opts => opts.MapFrom(src => src.ClientName))
                .ForMember(x => x.SubjectId, opts => opts.MapFrom(src => src.SubjectId))
                .ForMember(x => x.ClassId, opts => opts.MapFrom(src => src.ClassId))
                .ForMember(x => x.BoardId, opts => opts.MapFrom(src => src.BoardId))
                .ForMember(x => x.Gender, opts => opts.MapFrom(src => src.Gender))
                .ForMember(x => x.DOJ, opts => opts.MapFrom(src => src.DOJ))
                .ForMember(x => x.PickAndDrop, opts => opts.MapFrom(src => src.PickAndDrop))
                .ForMember(x => x.FirstName, opts => opts.MapFrom(src => src.FirstName))
                .ForMember(x => x.LastName, opts => opts.MapFrom(src => src.LastName))
                .ForMember(x => x.MiddleName, opts => opts.MapFrom(src => src.MiddleName))
                .ForMember(x => x.DOB, opts => opts.MapFrom(src => src.DOB))
                .ForMember(x => x.BloodGroup, opts => opts.MapFrom(src => src.BloodGroup))
                .ForMember(x => x.SchoolName, opts => opts.MapFrom(src => src.SchoolName))
                .ForMember(x => x.Address, opts => opts.MapFrom(src => src.Address))
                .ForMember(x => x.Pin, opts => opts.MapFrom(src => src.Pin))
                .ForMember(x => x.ParentContact, opts => opts.MapFrom(src => src.ParentContact))
                .ForMember(x => x.StudentContact, opts => opts.MapFrom(src => src.StudentContact))
                .ForMember(x => x.Email, opts => opts.MapFrom(src => src.Email))
                .ForMember(x => x.ConfirmEmail, opts => opts.MapFrom(src => src.ConfirmEmail))
                .ForMember(x => x.TotalFees, opts => opts.MapFrom(src => src.TotalFees))
                .ForMember(x => x.Discount, opts => opts.MapFrom(src => src.Discount))
                .ForMember(x => x.FinalFees, opts => opts.MapFrom(src => src.FinalFees))
                .ForMember(x => x.PhotoPath, opts => opts.MapFrom(src => src.PhotoPath))
                .ForMember(x => x.ClassName, opts => opts.MapFrom(src => src.ClassName))
                .ForMember(x => x.BoardName, opts => opts.MapFrom(src => src.BoardName))
                .ForMember(x => x.SubjectName, opts => opts.MapFrom(src => src.SubjectName))
                .ForMember(x => x.UserId, opts => opts.MapFrom(src => src.UserId))
                .ForMember(x => x.IsActive, opts => opts.MapFrom(src => src.IsActive))
                .ForMember(x => x.IsWhatsApp, opts => opts.MapFrom(src => src.IsWhatsApp))
                .ForMember(x => x.SelectedSubject, opts => opts.MapFrom(src => src.SelectedSubject))
                .ForMember(x => x.SId, opts => opts.MapFrom(src => src.SId))
                .ForMember(x => x.PunchId, opts => opts.MapFrom(src => src.PunchId))
                .ForMember(x => x.SchoolId, opts => opts.MapFrom(src => src.SchoolId))
                .ForMember(x => x.BatchName, opts => opts.MapFrom(src => src.BatchName))
                .ForMember(dest => dest.BranchId, opts => opts.MapFrom(src => src.BranchId))
                .ForMember(dest => dest.BranchName, opts => opts.MapFrom(src => src.BranchName))
                .ForMember(x => x.Branches, y => y.Ignore())
                .ForMember(x => x.Clients, y => y.Ignore())
                .ForMember(x => x.Boards, y => y.Ignore())
                .ForMember(x => x.Classes, y => y.Ignore())
                .ForMember(x => x.Subjects, y => y.Ignore())
                .ForMember(x => x.PhotoFilePath, y => y.Ignore())
                .ForMember(x => x.Schools, y => y.Ignore())
                .ForMember(x => x.ImageData, y => y.Ignore())
                .ForMember(x => x.CurrentUserRole, y => y.Ignore())
                .ForMember(x => x.IsIdExits, y => y.Ignore())
                .ForMember(x => x.PaidFee, y => y.Ignore())
                .ForMember(x => x.ReceiptBookNumber, y => y.Ignore())
                .ForMember(x => x.ReceiptNumber, y => y.Ignore())
                .ForMember(x => x.Batches, y => y.Ignore())
                .ForMember(x => x.PaymentNo, y => y.Ignore())
                .ForMember(x => x.PaymentLists, y => y.Ignore())
                .ForMember(x => x.PaymentErrorMessage, y => y.Ignore());
             


            CreateMap<StudentProjection, StudentEditViewModel>()
                .ForMember(x => x.BatchId, opts => opts.MapFrom(src => src.BatchId))
                .ForMember(x => x.SubjectId, opts => opts.MapFrom(src => src.SubjectId))
                .ForMember(x => x.SelectedSubject, opts => opts.MapFrom(src => src.SelectedSubject))
                .ForMember(x => x.ClassId, opts => opts.MapFrom(src => src.ClassId))
                .ForMember(x => x.BoardId, opts => opts.MapFrom(src => src.BoardId))
                .ForMember(x => x.Gender, opts => opts.MapFrom(src => src.Gender))
                .ForMember(x => x.DOJ, opts => opts.MapFrom(src => src.DOJ))
                .ForMember(x => x.PickAndDrop, opts => opts.MapFrom(src => src.PickAndDrop))
                .ForMember(x => x.FirstName, opts => opts.MapFrom(src => src.FirstName))
                .ForMember(x => x.LastName, opts => opts.MapFrom(src => src.LastName))
                .ForMember(x => x.MiddleName, opts => opts.MapFrom(src => src.MiddleName))
                .ForMember(x => x.DOB, opts => opts.MapFrom(src => src.DOB))
                .ForMember(x => x.BloodGroup, opts => opts.MapFrom(src => src.BloodGroup))
                .ForMember(x => x.SchoolName, opts => opts.MapFrom(src => src.SchoolName))
                .ForMember(x => x.Address, opts => opts.MapFrom(src => src.Address))
                .ForMember(x => x.Pin, opts => opts.MapFrom(src => src.Pin))
                .ForMember(x => x.ParentContact, opts => opts.MapFrom(src => src.ParentContact))
                .ForMember(x => x.StudentContact, opts => opts.MapFrom(src => src.StudentContact))
                .ForMember(x => x.Email, opts => opts.MapFrom(src => src.Email))
                .ForMember(x => x.TotalFees, opts => opts.MapFrom(src => src.TotalFees))
                .ForMember(x => x.Discount, opts => opts.MapFrom(src => src.Discount))
                .ForMember(x => x.FinalFees, opts => opts.MapFrom(src => src.FinalFees))
                .ForMember(x => x.PhotoPath, opts => opts.MapFrom(src => src.PhotoPath))
                .ForMember(x => x.ClassName, opts => opts.MapFrom(src => src.ClassName))
                .ForMember(x => x.BoardName, opts => opts.MapFrom(src => src.BoardName))
                .ForMember(x => x.SubjectName, opts => opts.MapFrom(src => src.SubjectName))
                .ForMember(x => x.UserId, opts => opts.MapFrom(src => src.UserId))
                .ForMember(x => x.IsActive, opts => opts.MapFrom(src => src.IsActive))
                .ForMember(x => x.IsWhatsApp, opts => opts.MapFrom(src => src.IsWhatsApp))
                .ForMember(x => x.PhotoFilePath, opts => opts.MapFrom(src => src.PhotoFilePath))
                .ForMember(x => x.PunchId, opts => opts.MapFrom(src => src.PunchId))
                .ForMember(x => x.SchoolId, opts => opts.MapFrom(src => src.SchoolId))
                .ForMember(dest => dest.BranchId, opts => opts.MapFrom(src => src.BranchId))
                .ForMember(dest => dest.BranchName, opts => opts.MapFrom(src => src.BranchName))

                 .ForMember(dest => dest.ClientId, opts => opts.MapFrom(src => src.ClientId))
                .ForMember(dest => dest.ClientName, opts => opts.MapFrom(src => src.ClientName))
                .ForMember(x => x.BatchName, opts => opts.MapFrom(src => src.BatchName))
                .ForMember(x => x.PaymentLists, opts => opts.MapFrom(src => src.PaymentLists))
                .ForMember(x => x.Branches, y => y.Ignore())
                .ForMember(x => x.Clients, y => y.Ignore())
                .ForMember(x => x.Boards, y => y.Ignore())
                .ForMember(x => x.Classes, y => y.Ignore())
                .ForMember(x => x.Subjects, y => y.Ignore())
                .ForMember(x => x.Schools, y => y.Ignore())
                .ForMember(x => x.ImageData, y => y.Ignore())
                .ForMember(x => x.CurrentUserRole, y => y.Ignore())
                .ForMember(x => x.Batches, y => y.Ignore())
                .ForMember(x => x.PaymentNo, y => y.Ignore())
                
                .ForMember(x => x.PaymentErrorMessage, y => y.Ignore());

            CreateMap<QuestionProjection, QuestionDataViewModel>()
                .ForMember(dest => dest.SubjectId, opts => opts.MapFrom(src => src.SubjectId))
                .ForMember(dest => dest.ClassId, opts => opts.MapFrom(src => src.ClassId))
                .ForMember(dest => dest.ChapterId, opts => opts.MapFrom(src => src.ChapterId))
                .ForMember(dest => dest.QuestionId, opts => opts.MapFrom(src => src.QuestionId))
                .ForMember(dest => dest.QuestionInfo, opts => opts.MapFrom(src => src.QuestionInfo))
                .ForMember(dest => dest.QuestionYear, opts => opts.MapFrom(src => src.QuestionYear))
                .ForMember(dest => dest.Numerical_Answer, opts => opts.MapFrom(src => src.Numerical_Answer))
                .ForMember(dest => dest.Unit, opts => opts.MapFrom(src => src.Unit))
                .ForMember(dest => dest.QuestionLevel, opts => opts.MapFrom(src => src.QuestionLevel))
                .ForMember(dest => dest.QuestionType, opts => opts.MapFrom(src => src.QuestionType))
                .ForMember(dest => dest.Hint, opts => opts.MapFrom(src => src.Hint))
                .ForMember(dest => dest.OptionA, opts => opts.MapFrom(src => src.Option1))
                .ForMember(dest => dest.OptionB, opts => opts.MapFrom(src => src.Option2))
                .ForMember(dest => dest.OptionC, opts => opts.MapFrom(src => src.Option3))
                .ForMember(dest => dest.OptionD, opts => opts.MapFrom(src => src.Option4))
                .ForMember(dest => dest.Answer, opts => opts.MapFrom(src => src.Answer))
                .ForMember(dest => dest.IsQuestionAsImage, opts => opts.MapFrom(src => src.IsQuestionAsImage))
                .ForMember(dest => dest.IsHintAsImage, opts => opts.MapFrom(src => src.IsHintAsImage))
                .ForMember(dest => dest.IsOptionAsImage, opts => opts.MapFrom(src => src.IsOptionAsImage))
                .ForMember(dest => dest.OptionImageFile, opts => opts.MapFrom(src => src.OptionImageFile))
                .ForMember(dest => dest.QuestionImageFile, opts => opts.MapFrom(src => src.QuestionImageFile))
                .ForMember(dest => dest.HintImageFile, opts => opts.MapFrom(src => src.HintImageFile))
                .ForMember(dest => dest.ClassName, opts => opts.MapFrom(src => src.ClassName))
                .ForMember(dest => dest.SubjectName, opts => opts.MapFrom(src => src.SubjectName))
                .ForMember(dest => dest.ChapterName, opts => opts.MapFrom(src => src.ChapterName))
                .ForMember(dest => dest.QuestionImagePath, opts => opts.MapFrom(src => src.QuestionImagePath))
                .ForMember(dest => dest.HintImagePath, opts => opts.MapFrom(src => src.HintImagePath))
                .ForMember(dest => dest.OptionImagePath, opts => opts.MapFrom(src => src.OptionImagePath))
                .ForMember(x => x.Classes, y => y.Ignore())
                .ForMember(x => x.Subjects, y => y.Ignore())
                .ForMember(x => x.Chapters, y => y.Ignore());

            CreateMap<QuestionProjection, QuestionGetViewModel>()
                .ForMember(dest => dest.QuestionId, opts => opts.MapFrom(src => src.QuestionId))
                .ForMember(dest => dest.QuestionInfo, opts => opts.MapFrom(src => src.QuestionInfo))
                .ForMember(dest => dest.QuestionYear, opts => opts.MapFrom(src => src.QuestionYear))
                 .ForMember(dest => dest.Numerical_Answer, opts => opts.MapFrom(src => src.Numerical_Answer))
                  .ForMember(dest => dest.Unit, opts => opts.MapFrom(src => src.Unit))
                .ForMember(dest => dest.QuestionLevel, opts => opts.MapFrom(src => src.QuestionLevel))
                .ForMember(dest => dest.QuestionType, opts => opts.MapFrom(src => src.QuestionType))
                .ForMember(dest => dest.Hint, opts => opts.MapFrom(src => src.Hint))
                .ForMember(dest => dest.OptionA, opts => opts.MapFrom(src => src.Option1))
                .ForMember(dest => dest.OptionB, opts => opts.MapFrom(src => src.Option2))
                .ForMember(dest => dest.OptionC, opts => opts.MapFrom(src => src.Option3))
                .ForMember(dest => dest.OptionD, opts => opts.MapFrom(src => src.Option4))
                .ForMember(dest => dest.Answer, opts => opts.MapFrom(src => src.Answer))
                .ForMember(dest => dest.IsQuestionAsImage, opts => opts.MapFrom(src => src.IsQuestionAsImage))
                .ForMember(dest => dest.IsHintAsImage, opts => opts.MapFrom(src => src.IsHintAsImage))
                .ForMember(dest => dest.IsOptionAsImage, opts => opts.MapFrom(src => src.IsOptionAsImage))
                .ForMember(dest => dest.OptionImageFile, opts => opts.MapFrom(src => src.OptionImageFile))
                .ForMember(dest => dest.QuestionImageFile, opts => opts.MapFrom(src => src.QuestionImageFile))
                .ForMember(dest => dest.HintImageFile, opts => opts.MapFrom(src => src.HintImageFile))
                .ForMember(dest => dest.QuestionImagePath, opts => opts.MapFrom(src => src.QuestionImagePath))
                .ForMember(dest => dest.HintImagePath, opts => opts.MapFrom(src => src.HintImagePath))
                .ForMember(dest => dest.OptionImagePath, opts => opts.MapFrom(src => src.OptionImagePath));

            CreateMap<PDFUploadProjection, PDFUploadViewModel>()
                .ForMember(dest => dest.ClassId, opts => opts.MapFrom(src => src.ClassId))
                .ForMember(dest => dest.PDFUploadId, opts => opts.MapFrom(src => src.PDFUploadId))
                .ForMember(dest => dest.Title, opts => opts.MapFrom(src => src.Title))
                .ForMember(dest => dest.FileName, opts => opts.MapFrom(src => src.FileName))
                .ForMember(dest => dest.FilePath, opts => opts.MapFrom(src => src.FilePath))
                .ForMember(dest => dest.IsVisible, opts => opts.MapFrom(src => src.IsVisible))
                .ForMember(dest => dest.ClassName, opts => opts.MapFrom(src => src.ClassName))
                .ForMember(dest => dest.PDFCategoryId, opts => opts.MapFrom(src => src.PDFCategoryId))
                .ForMember(dest => dest.PDFCategoryName, opts => opts.MapFrom(src => src.PDFCategoryName))
                .ForMember(dest => dest.CreatedOn, opts => opts.MapFrom(src => src.CreatedOn))
                .ForMember(dest => dest.IsSend, opts => opts.MapFrom(src => src.IsSend))
                .ForMember(x => x.Classes, y => y.Ignore())
                .ForMember(x => x.PDFCategories, y => y.Ignore());

            CreateMap<PDFUploadProjection, PDFUploadDeleteViewModel>()
                .ForMember(dest => dest.ClassId, opts => opts.MapFrom(src => src.ClassId))
                .ForMember(dest => dest.PDFUploadId, opts => opts.MapFrom(src => src.PDFUploadId))
                .ForMember(dest => dest.Title, opts => opts.MapFrom(src => src.Title))
                .ForMember(dest => dest.FileName, opts => opts.MapFrom(src => src.FileName))
                .ForMember(dest => dest.FilePath, opts => opts.MapFrom(src => src.FilePath))
                .ForMember(dest => dest.IsVisible, opts => opts.MapFrom(src => src.IsVisible))
                .ForMember(dest => dest.ClassName, opts => opts.MapFrom(src => src.ClassName))
                .ForMember(dest => dest.PDFCategoryId, opts => opts.MapFrom(src => src.PDFCategoryId))
                .ForMember(dest => dest.PDFCategoryName, opts => opts.MapFrom(src => src.PDFCategoryName))
                .ForMember(dest => dest.IsSend, opts => opts.MapFrom(src => src.IsSend))
                .ForMember(x => x.Classes, y => y.Ignore())
                .ForMember(x => x.PDFCategories, y => y.Ignore());

            CreateMap<PDFUploadProjection, PDFUploadEditViewModel>()
                .ForMember(dest => dest.ClassId, opts => opts.MapFrom(src => src.ClassId))
                .ForMember(dest => dest.PDFUploadId, opts => opts.MapFrom(src => src.PDFUploadId))
                .ForMember(dest => dest.Title, opts => opts.MapFrom(src => src.Title))
                .ForMember(dest => dest.FileName, opts => opts.MapFrom(src => src.FileName))
                .ForMember(dest => dest.FilePath, opts => opts.MapFrom(src => src.FilePath))
                .ForMember(dest => dest.IsVisible, opts => opts.MapFrom(src => src.IsVisible))
                .ForMember(dest => dest.ClassName, opts => opts.MapFrom(src => src.ClassName))
                .ForMember(dest => dest.PDFCategoryId, opts => opts.MapFrom(src => src.PDFCategoryId))
                .ForMember(dest => dest.PDFCategoryName, opts => opts.MapFrom(src => src.PDFCategoryName))
                .ForMember(dest => dest.IsSend, opts => opts.MapFrom(src => src.IsSend))
                .ForMember(x => x.Classes, y => y.Ignore())
                .ForMember(x => x.PDFCategories, y => y.Ignore());

            CreateMap<PDFCategoryProjection, PDFCategoryViewModel>();

            CreateMap<TeacherProjection, TeacherViewModel>()
                .ForMember(x => x.FirstName, opts => opts.MapFrom(src => src.FirstName))
                .ForMember(x => x.LastName, opts => opts.MapFrom(src => src.LastName))
                .ForMember(x => x.MiddleName, opts => opts.MapFrom(src => src.MiddleName))
                .ForMember(x => x.ContactNo, opts => opts.MapFrom(src => src.ContactNo))
                .ForMember(x => x.Email, opts => opts.MapFrom(src => src.Email))
                .ForMember(x => x.ConfirmEmail, opts => opts.MapFrom(src => src.ConfirmEmail))
                .ForMember(x => x.UserId, opts => opts.MapFrom(src => src.UserId))
                .ForMember(x => x.Description, opts => opts.MapFrom(src => src.Description))
                .ForMember(dest => dest.BranchId, opts => opts.MapFrom(src => src.BranchId))
                .ForMember(dest => dest.BranchName, opts => opts.MapFrom(src => src.BranchName))
                .ForMember(dest => dest.ClientId, opts => opts.MapFrom(src => src.ClientId))
                .ForMember(dest => dest.ClientName, opts => opts.MapFrom(src => src.ClientName))
                .ForMember(dest => dest.IsActive, opts => opts.MapFrom(src => src.IsActive))
                .ForMember(dest => dest.Qualification, opts => opts.MapFrom(src => src.Qualification))
                .ForMember(x => x.CurrentUserRole, y => y.Ignore())
                .ForMember(x => x.Branches, y => y.Ignore())
            .ForMember(x => x.Clients, y => y.Ignore());

            CreateMap<TeacherProjection, TeacherEditViewModel>()
            .ForMember(x => x.FirstName, opts => opts.MapFrom(src => src.FirstName))
            .ForMember(x => x.LastName, opts => opts.MapFrom(src => src.LastName))
            .ForMember(x => x.MiddleName, opts => opts.MapFrom(src => src.MiddleName))
            .ForMember(x => x.ContactNo, opts => opts.MapFrom(src => src.ContactNo))
            .ForMember(x => x.Email, opts => opts.MapFrom(src => src.Email))
            .ForMember(x => x.UserId, opts => opts.MapFrom(src => src.UserId))
            .ForMember(x => x.Description, opts => opts.MapFrom(src => src.Description))
            .ForMember(dest => dest.BranchId, opts => opts.MapFrom(src => src.BranchId))
            .ForMember(dest => dest.BranchName, opts => opts.MapFrom(src => src.BranchName))
            .ForMember(dest => dest.IsActive, opts => opts.MapFrom(src => src.IsActive))
            .ForMember(dest => dest.Qualification, opts => opts.MapFrom(src => src.Qualification))
            .ForMember(x => x.Branches, y => y.Ignore())
            .ForMember(x => x.CurrentUserRole, y => y.Ignore());

            CreateMap<AttendanceProjection, AttendanceViewModel>()
           .ForMember(dest => dest.ClassId, opts => opts.MapFrom(src => src.ClassId))
           .ForMember(dest => dest.BatchId, opts => opts.MapFrom(src => src.BatchId))
           .ForMember(dest => dest.Date, opts => opts.MapFrom(src => src.Date))
           .ForMember(dest => dest.Activity, opts => opts.MapFrom(src => src.Activity))
           .ForMember(dest => dest.UserId, opts => opts.MapFrom(src => src.UserId))
           .ForMember(dest => dest.StudentAttendence, opts => opts.MapFrom(src => src.StudentAttendence))
           .ForMember(dest => dest.ClassName, opts => opts.MapFrom(src => src.ClassName))
           .ForMember(dest => dest.BatchName, opts => opts.MapFrom(src => src.BatchName))
           .ForMember(dest => dest.TeacherName, opts => opts.MapFrom(src => src.TeacherName))
           .ForMember(dest => dest.BranchId, opts => opts.MapFrom(src => src.BranchId))
           .ForMember(dest => dest.BranchName, opts => opts.MapFrom(src => src.BranchName))
                .ForMember(dest => dest.ClientId, opts => opts.MapFrom(src => src.ClientId))
           .ForMember(dest => dest.ClientName, opts => opts.MapFrom(src => src.ClientName))
           .ForMember(dest => dest.SelectedAttendance, opts => opts.MapFrom(src => src.StudentAttendence))
           .ForMember(dest => dest.InTime, opts => opts.MapFrom(src => src.InTime))
           .ForMember(dest => dest.OutTime, opts => opts.MapFrom(src => src.OutTime))
           .ForMember(x => x.Branches, y => y.Ignore())
           .ForMember(dest => dest.Clients, y => y.Ignore())
           .ForMember(x => x.Classes, y => y.Ignore())
           .ForMember(x => x.Teachers, y => y.Ignore())
           .ForMember(x => x.Batches, y => y.Ignore())
           .ForMember(x => x.CurrentUserRole, y => y.Ignore())
           .ForMember(x => x.SMS, y => y.Ignore())
           .ForMember(x => x.Email, y => y.Ignore())
           .ForMember(x => x.AppNotification, y => y.Ignore());

            CreateMap<TestPaperProjection, TestPaperViewModel>()
                .ForMember(dest => dest.TestPaperId, opts => opts.MapFrom(src => src.TestPaperId))
                .ForMember(dest => dest.ClassId, opts => opts.MapFrom(src => src.ClassId))
                .ForMember(dest => dest.DelimitedQuestionIds, opts => opts.MapFrom(src => src.DelimitedQuestionIds))
                .ForMember(dest => dest.TestTaken, opts => opts.MapFrom(src => src.TestTaken))
                .ForMember(dest => dest.Title, opts => opts.MapFrom(src => src.Title))
                .ForMember(dest => dest.TestType, opts => opts.MapFrom(src => src.TestType))
                .ForMember(dest => dest.ClassName, opts => opts.MapFrom(src => src.ClassName))
                .ForMember(dest => dest.DelimitedChapterIds, opts => opts.MapFrom(src => src.DelimitedChapterIds))
                .ForMember(dest => dest.CreatedOn, opts => opts.MapFrom(src => src.CreatedOn))
                .ForMember(x => x.Classes, y => y.Ignore())
                .ForMember(x => x.SubjectName, y => y.Ignore())
                .ForMember(x => x.QuestionCount, y => y.Ignore());

            CreateMap<TestPaperProjection, TestPaperDeleteViewModel>()
                .ForMember(dest => dest.TestPaperId, opts => opts.MapFrom(src => src.TestPaperId))
                .ForMember(dest => dest.ClassId, opts => opts.MapFrom(src => src.ClassId))
                .ForMember(dest => dest.DelimitedQuestionIds, opts => opts.MapFrom(src => src.DelimitedQuestionIds))
                .ForMember(dest => dest.TestTaken, opts => opts.MapFrom(src => src.TestTaken))
                .ForMember(dest => dest.Title, opts => opts.MapFrom(src => src.Title))
                .ForMember(dest => dest.TestType, opts => opts.MapFrom(src => src.TestType))
                .ForMember(dest => dest.ClassName, opts => opts.MapFrom(src => src.ClassName))
                .ForMember(dest => dest.DelimitedChapterIds, opts => opts.MapFrom(src => src.DelimitedChapterIds))
                .ForMember(dest => dest.CreatedOn, opts => opts.MapFrom(src => src.CreatedOn))
                .ForMember(dest => dest.SubjectName, opts => opts.MapFrom(src => src.SubjectName))
                .ForMember(dest => dest.Date, opts => opts.MapFrom(src => src.Date))
                .ForMember(dest => dest.StartTime, opts => opts.MapFrom(src => src.StartTime))
                .ForMember(dest => dest.TimeDuration, opts => opts.MapFrom(src => src.TimeDuration))
                .ForMember(x => x.Classes, y => y.Ignore())
                .ForMember(x => x.Branches, y => y.Ignore())
                .ForMember(x => x.BranchId, y => y.Ignore())
                .ForMember(x => x.Batches, y => y.Ignore())
                .ForMember(x => x.BatchId, y => y.Ignore())
                .ForMember(x => x.SelectedBatches, y => y.Ignore())
                .ForMember(x => x.SelectedBranches, y => y.Ignore())
                .ForMember(x => x.SMS, y => y.Ignore())
                .ForMember(x => x.Email, y => y.Ignore())
                .ForMember(x => x.AppNotification, y => y.Ignore())
                .ForMember(x => x.Media, y => y.Ignore());

            CreateMap<MachineProjection, MachineViewModel>()
                .ForMember(dest => dest.MachineId, opts => opts.MapFrom(src => src.MachineId))
                .ForMember(dest => dest.Name, opts => opts.MapFrom(src => src.Name))
                .ForMember(dest => dest.SerialNumber, opts => opts.MapFrom(src => src.SerialNumber))
                .ForMember(dest => dest.BranchId, opts => opts.MapFrom(src => src.BranchId))
                .ForMember(dest => dest.BranchName, opts => opts.MapFrom(src => src.BranchName))
                .ForMember(x => x.CurrentUserRole, y => y.Ignore())
                .ForMember(x => x.Branches, y => y.Ignore());

            CreateMap<BranchProjection, BranchViewModel>()
                .ForMember(dest => dest.ClientId, opts => opts.MapFrom(src => src.ClientId))
                .ForMember(dest => dest.ClientName, opts => opts.MapFrom(src => src.ClientName))
                .ForMember(dest => dest.BranchId, opts => opts.MapFrom(src => src.BranchId))
                .ForMember(dest => dest.Name, opts => opts.MapFrom(src => src.Name))
                .ForMember(dest => dest.Address, opts => opts.MapFrom(src => src.Address))
                .ForMember(dest => dest.CurrentUserRole, y => y.Ignore())
                .ForMember(dest => dest.Clients, y => y.Ignore());






            CreateMap<ClientProjection, ClientViewModel>()

              .ForMember(dest => dest.ClientId, opts => opts.MapFrom(src => src.ClientId))
                .ForMember(dest => dest.ClientName, opts => opts.MapFrom(src => src.ClientName))
                .ForMember(dest => dest.Name, opts => opts.MapFrom(src => src.ClientName))
                .ForMember(dest => dest.Address, opts => opts.MapFrom(src => src.Address))
                .ForMember(dest => dest.CurrentUserRole, y => y.Ignore())
             .ForMember(dest => dest.Clients, y => y.Ignore());



            CreateMap<SchoolProjection, SchoolViewModel>()
              .ForMember(dest => dest.ClientId, opts => opts.MapFrom(src => src.ClientId))
                .ForMember(dest => dest.ClientName, opts => opts.MapFrom(src => src.ClientName))
                .ForMember(dest => dest.SchoolId, opts => opts.MapFrom(src => src.SchoolId))
                .ForMember(dest => dest.Name, opts => opts.MapFrom(src => src.Name))
                .ForMember(dest => dest.CenterNumber, opts => opts.MapFrom(src => src.CenterNumber))
                .ForMember(dest => dest.CurrentUserRole, y => y.Ignore())
                .ForMember(dest => dest.Clients, y => y.Ignore());


            CreateMap<BranchAdminProjection, BranchAdminViewModel>()
                .ForMember(dest => dest.BId, opts => opts.MapFrom(src => src.AId))
                .ForMember(dest => dest.BranchId, opts => opts.MapFrom(src => src.BranchId))
                .ForMember(dest => dest.UserId, opts => opts.MapFrom(src => src.UserId))
                .ForMember(dest => dest.Active, opts => opts.MapFrom(src => src.Active))
                .ForMember(dest => dest.Email, opts => opts.MapFrom(src => src.Email))
                .ForMember(dest => dest.ConfirmEmail, opts => opts.MapFrom(src => src.ConfirmEmail))
                .ForMember(dest => dest.ContactNo, opts => opts.MapFrom(src => src.ContactNo))
                .ForMember(dest => dest.BranchName, opts => opts.MapFrom(src => src.BranchName))
                .ForMember(x => x.Branches, y => y.Ignore());

            CreateMap<ClientAdminProjection, ClientAdminViewModel>()
               .ForMember(dest => dest.CId, opts => opts.MapFrom(src => src.AId))
               .ForMember(dest => dest.ClientId, opts => opts.MapFrom(src => src.ClientId))
               .ForMember(dest => dest.UserId, opts => opts.MapFrom(src => src.UserId))
               .ForMember(dest => dest.Active, opts => opts.MapFrom(src => src.Active))
               .ForMember(dest => dest.Email, opts => opts.MapFrom(src => src.Email))
               .ForMember(dest => dest.ConfirmEmail, opts => opts.MapFrom(src => src.ConfirmEmail))
               .ForMember(dest => dest.ContactNo, opts => opts.MapFrom(src => src.ContactNo))
               .ForMember(dest => dest.ClientName, opts => opts.MapFrom(src => src.ClientName))
               .ForMember(x => x.Clients, y => y.Ignore());


            CreateMap<BranchAdminProjection, BranchAdminEditViewModel>()
               .ForMember(dest => dest.BId, opts => opts.MapFrom(src => src.AId))
               .ForMember(dest => dest.BranchId, opts => opts.MapFrom(src => src.BranchId))
               .ForMember(dest => dest.UserId, opts => opts.MapFrom(src => src.UserId))
               .ForMember(dest => dest.Active, opts => opts.MapFrom(src => src.Active))
               .ForMember(dest => dest.Email, opts => opts.MapFrom(src => src.Email))
               .ForMember(dest => dest.ContactNo, opts => opts.MapFrom(src => src.ContactNo))
               .ForMember(dest => dest.BranchName, opts => opts.MapFrom(src => src.BranchName))
               .ForMember(x => x.Branches, y => y.Ignore());

            CreateMap<ClientAdminProjection, ClientAdminEditViewModel>()
             .ForMember(dest => dest.CId, opts => opts.MapFrom(src => src.AId))
             .ForMember(dest => dest.ClientId, opts => opts.MapFrom(src => src.ClientId))
             .ForMember(dest => dest.UserId, opts => opts.MapFrom(src => src.UserId))
             .ForMember(dest => dest.Active, opts => opts.MapFrom(src => src.Active))
             .ForMember(dest => dest.Email, opts => opts.MapFrom(src => src.Email))
             .ForMember(dest => dest.ContactNo, opts => opts.MapFrom(src => src.ContactNo))
             .ForMember(dest => dest.ClientName, opts => opts.MapFrom(src => src.ClientName))
             .ForMember(x => x.Clients, y => y.Ignore());


            CreateMap<BranchAdminProjection, BranchAdminDeleteViewModel>()
               .ForMember(dest => dest.BId, opts => opts.MapFrom(src => src.AId))
               .ForMember(dest => dest.BranchId, opts => opts.MapFrom(src => src.BranchId))
               .ForMember(dest => dest.UserId, opts => opts.MapFrom(src => src.UserId))
               .ForMember(dest => dest.Active, opts => opts.MapFrom(src => src.Active))
               .ForMember(dest => dest.Email, opts => opts.MapFrom(src => src.Email))
               .ForMember(dest => dest.ContactNo, opts => opts.MapFrom(src => src.ContactNo))
               .ForMember(dest => dest.BranchName, opts => opts.MapFrom(src => src.BranchName))
               .ForMember(x => x.Branches, y => y.Ignore());

            CreateMap<ClientAdminProjection, ClientAdminDeleteViewModel>()
              .ForMember(dest => dest.CId, opts => opts.MapFrom(src => src.AId))
              .ForMember(dest => dest.ClientId, opts => opts.MapFrom(src => src.ClientId))
              .ForMember(dest => dest.UserId, opts => opts.MapFrom(src => src.UserId))
              .ForMember(dest => dest.Active, opts => opts.MapFrom(src => src.Active))
              .ForMember(dest => dest.Email, opts => opts.MapFrom(src => src.Email))
              .ForMember(dest => dest.ContactNo, opts => opts.MapFrom(src => src.ContactNo))
              .ForMember(dest => dest.ClientName, opts => opts.MapFrom(src => src.ClientName))
              .ForMember(x => x.Clients, y => y.Ignore());


            CreateMap<NotificationProjection, NotificationViewModel>()
               .ForMember(dest => dest.NotificationId, opts => opts.MapFrom(src => src.NotificationId))
               .ForMember(dest => dest.NotificationMessage, opts => opts.MapFrom(src => src.NotificationMessage))
               .ForMember(dest => dest.AllUser, opts => opts.MapFrom(src => src.AllUser))
               .ForMember(dest => dest.SelectedBatches, opts => opts.MapFrom(src => src.SelectedBatches))
               .ForMember(dest => dest.SelectedBranches, opts => opts.MapFrom(src => src.SelectedBranches))
               .ForMember(dest => dest.SelectedClasses, opts => opts.MapFrom(src => src.SelectedClasses))
               .ForMember(dest => dest.StudentCount, opts => opts.MapFrom(src => src.StudentCount))
               .ForMember(dest => dest.ParentCount, opts => opts.MapFrom(src => src.ParentCount))
               .ForMember(dest => dest.TeacherCount, opts => opts.MapFrom(src => src.TeacherCount))
               .ForMember(dest => dest.BranchAdminCount, opts => opts.MapFrom(src => src.BranchAdminCount))
                 
               .ForMember(dest => dest.CreatedOn, opts => opts.MapFrom(src => src.CreatedOn))
               .ForMember(dest => dest.NotificationAutoDate, opts => opts.MapFrom(src => src.NotificationAutoDate))
               .ForMember(dest => dest.Student, opts => opts.Ignore())
               .ForMember(dest => dest.Parent, opts => opts.Ignore())
               .ForMember(dest => dest.Teacher, opts => opts.Ignore())
               .ForMember(dest => dest.BranchAdmin, opts => opts.Ignore())
                 .ForMember(dest => dest.ClientAdmin, opts => opts.Ignore())
                .ForMember(dest => dest.ClientAdmin, opts => opts.Ignore())
               .ForMember(dest => dest.Email, opts => opts.Ignore())
               .ForMember(dest => dest.SMS, opts => opts.Ignore())
               .ForMember(dest => dest.AppNotification, opts => opts.Ignore())
               .ForMember(dest => dest.BranchId, opts => opts.Ignore())
                 .ForMember(dest => dest.ClientId, opts => opts.Ignore())
               .ForMember(dest => dest.ClassId, opts => opts.Ignore())
               .ForMember(dest => dest.BatchId, opts => opts.Ignore())
               .ForMember(dest => dest.Branches, opts => opts.Ignore())
                  .ForMember(dest => dest.Clients, opts => opts.Ignore())
               .ForMember(dest => dest.Classes, opts => opts.Ignore())
               .ForMember(dest => dest.Batches, opts => opts.Ignore())
               .ForMember(dest => dest.CurrentUserRole, opts => opts.Ignore())
               .ForMember(dest => dest.BranchName, opts => opts.Ignore())
             .ForMember(dest => dest.ClientName, opts => opts.Ignore());

            CreateMap<ArrangeTestProjection, ArrangeTestViewModel>();

            CreateMap<StudentFeedbackProjection, StudentFeedbackViewModel>()
               .ForMember(dest => dest.StudentFeedbackId, opts => opts.MapFrom(src => src.StudentFeedbackId))
               .ForMember(dest => dest.Name, opts => opts.MapFrom(src => src.Name))
               .ForMember(dest => dest.Email, opts => opts.MapFrom(src => src.Email))
               .ForMember(dest => dest.Contact, opts => opts.MapFrom(src => src.Contact))
               .ForMember(dest => dest.Message, opts => opts.MapFrom(src => src.Message))
               .ForMember(dest => dest.UserId, opts => opts.MapFrom(src => src.UserId))
               .ForMember(dest => dest.Rating, opts => opts.MapFrom(src => src.Rating))
               .ForMember(dest => dest.CreatedOn, opts => opts.MapFrom(src => src.CreatedOn))
               .ForMember(x => x.FeedbackFor, y => y.Ignore())
               .ForMember(x => x.Teacher, y => y.Ignore())
               .ForMember(x => x.Status, y => y.Ignore())
               .ForMember(x => x.ConfirmEmail, y => y.Ignore());

            CreateMap<StudentTimetableProjection, StudentTimetableViewModel>()
            .ForMember(x => x.StudentTimetableId, opts => opts.MapFrom(src => src.StudentTimetableId))
            .ForMember(x => x.CreatedOn, opts => opts.MapFrom(src => src.CreatedOn))
            .ForMember(x => x.Description, opts => opts.MapFrom(src => src.Description))
            .ForMember(x => x.FileName, opts => opts.MapFrom(src => src.FileName))
            .ForMember(x => x.FilePath, opts => opts.MapFrom(src => src.FilePath))
            .ForMember(x => x.SelectedBranches, opts => opts.MapFrom(src => src.SelectedBranches))
            .ForMember(x => x.SelectedClasses, opts => opts.MapFrom(src => src.SelectedClasses))
            .ForMember(x => x.SelectedBatches, opts => opts.MapFrom(src => src.SelectedBatches))
            .ForMember(x => x.AttachmentDescription, opts => opts.MapFrom(src => src.AttachmentDescription))
            .ForMember(x => x.StudentTimetableDate, opts => opts.MapFrom(src => src.StudentTimetableDate))
            .ForMember(x => x.ClassId, y => y.Ignore())
            .ForMember(x => x.BatchId, y => y.Ignore())
            .ForMember(x => x.BranchId, y => y.Ignore())
             .ForMember(x => x.ClientId, y => y.Ignore())
            .ForMember(x => x.Classes, y => y.Ignore())
            .ForMember(x => x.Branches, y => y.Ignore())
             .ForMember(x => x.Clients, y => y.Ignore())
            .ForMember(x => x.Batches, y => y.Ignore())
            .ForMember(x => x.CurrentUserRole, y => y.Ignore())
            .ForMember(x => x.BranchName, y => y.Ignore())
              .ForMember(x => x.ClientName, y => y.Ignore());

            CreateMap<StudentTimetableProjection, StudentTimetableEditViewModel>()
                .ForMember(x => x.StudentTimetableId, opts => opts.MapFrom(src => src.StudentTimetableId))
                .ForMember(x => x.CreatedOn, opts => opts.MapFrom(src => src.CreatedOn))
                .ForMember(x => x.Description, opts => opts.MapFrom(src => src.Description))
                .ForMember(x => x.FileName, opts => opts.MapFrom(src => src.FileName))
                .ForMember(x => x.FilePath, opts => opts.MapFrom(src => src.FilePath))
                .ForMember(x => x.SelectedBranches, opts => opts.MapFrom(src => src.SelectedBranches))
                .ForMember(x => x.SelectedClasses, opts => opts.MapFrom(src => src.SelectedClasses))
                .ForMember(x => x.SelectedBatches, opts => opts.MapFrom(src => src.SelectedBatches))
                .ForMember(x => x.Category, opts => opts.MapFrom(src => src.Category))
                .ForMember(x => x.AttachmentDescription, opts => opts.MapFrom(src => src.AttachmentDescription))
                .ForMember(x => x.StudentTimetableDate, opts => opts.MapFrom(src => src.StudentTimetableDate))
                .ForMember(x => x.ClassId, y => y.Ignore())
                .ForMember(x => x.BatchId, y => y.Ignore())
                .ForMember(x => x.BranchId, y => y.Ignore())
                .ForMember(x => x.Classes, y => y.Ignore())
                .ForMember(x => x.Branches, y => y.Ignore())
                .ForMember(x => x.Batches, y => y.Ignore());

            CreateMap<DailyPracticePaperProjection, DailyPracticePaperViewModel>()
             .ForMember(x => x.DailyPracticePaperId, opts => opts.MapFrom(src => src.DailyPracticePaperId))
             .ForMember(x => x.CreatedOn, opts => opts.MapFrom(src => src.CreatedOn))
             .ForMember(x => x.Description, opts => opts.MapFrom(src => src.Description))
             .ForMember(x => x.FileName, opts => opts.MapFrom(src => src.FileName))
             .ForMember(x => x.FilePath, opts => opts.MapFrom(src => src.FilePath))
             .ForMember(x => x.SelectedBranches, opts => opts.MapFrom(src => src.SelectedBranches))
             .ForMember(x => x.SelectedClasses, opts => opts.MapFrom(src => src.SelectedClasses))
             .ForMember(x => x.SelectedBatches, opts => opts.MapFrom(src => src.SelectedBatches))
             .ForMember(x => x.DailyPracticePaperDate, opts => opts.MapFrom(src => src.DailyPracticePaperDate))
             .ForMember(x => x.AttachmentDescription, opts => opts.MapFrom(src => src.AttachmentDescription))
             .ForMember(x => x.ClassId, y => y.Ignore())
             .ForMember(x => x.BatchId, y => y.Ignore())
             .ForMember(x => x.BranchId, y => y.Ignore())
             .ForMember(x => x.Classes, y => y.Ignore())
             .ForMember(x => x.Branches, y => y.Ignore())
             .ForMember(x => x.Batches, y => y.Ignore())
             .ForMember(x => x.CurrentUserRole, y => y.Ignore())
             .ForMember(x => x.BranchName, y => y.Ignore());

            CreateMap<DailyPracticePaperProjection, DailyPracticePaperEditViewModel>()
              .ForMember(x => x.DailyPracticePaperId, opts => opts.MapFrom(src => src.DailyPracticePaperId))
              .ForMember(x => x.CreatedOn, opts => opts.MapFrom(src => src.CreatedOn))
              .ForMember(x => x.Description, opts => opts.MapFrom(src => src.Description))
              .ForMember(x => x.FileName, opts => opts.MapFrom(src => src.FileName))
              .ForMember(x => x.FilePath, opts => opts.MapFrom(src => src.FilePath))
              .ForMember(x => x.SelectedBranches, opts => opts.MapFrom(src => src.SelectedBranches))
              .ForMember(x => x.SelectedClasses, opts => opts.MapFrom(src => src.SelectedClasses))
              .ForMember(x => x.SelectedBatches, opts => opts.MapFrom(src => src.SelectedBatches))
              .ForMember(x => x.DailyPracticePaperDate, opts => opts.MapFrom(src => src.DailyPracticePaperDate))
              .ForMember(x => x.AttachmentDescription, opts => opts.MapFrom(src => src.AttachmentDescription))
              .ForMember(x => x.ClassId, y => y.Ignore())
              .ForMember(x => x.BatchId, y => y.Ignore())
              .ForMember(x => x.BranchId, y => y.Ignore())
              .ForMember(x => x.Classes, y => y.Ignore())
              .ForMember(x => x.Branches, y => y.Ignore())
              .ForMember(x => x.Batches, y => y.Ignore());

            CreateMap<OfflineTestPaperProjection, OfflineTestPaperViewModel>()
              .ForMember(dest => dest.OfflineTestPaperId, opts => opts.MapFrom(src => src.OfflineTestPaperId))
              .ForMember(dest => dest.SubjectId, opts => opts.MapFrom(src => src.SubjectId))
              .ForMember(dest => dest.TotalMarks, opts => opts.MapFrom(src => src.TotalMarks))
              .ForMember(dest => dest.TestDate, opts => opts.MapFrom(src => src.TestDate))
              .ForMember(dest => dest.TestInTime, opts => opts.MapFrom(src => src.TestInTime.ToString(Constants.TimeFormat)))
             .ForMember(dest => dest.ClassId, opts => opts.MapFrom(src => src.ClassId))
              .ForMember(dest => dest.TestOutTime, opts => opts.MapFrom(src => src.TestOutTime))
              .ForMember(dest => dest.TestOutTime, opts => opts.MapFrom(src => src.TestOutTime.ToString(Constants.TimeFormat)))
              .ForMember(dest => dest.SelectedBatches, opts => opts.MapFrom(src => src.SelectedBatches))
              .ForMember(dest => dest.Media, opts => opts.MapFrom(src => src.Media))
              .ForMember(dest => dest.CreatedOn, opts => opts.MapFrom(src => src.CreatedOn))
              .ForMember(dest => dest.ClassName, opts => opts.MapFrom(src => src.ClassName))
              .ForMember(dest => dest.SubjectName, opts => opts.MapFrom(src => src.SubjectName))
              .ForMember(x => x.Subjects, y => y.Ignore())
              .ForMember(x => x.Classes, y => y.Ignore())
              .ForMember(x => x.BranchName, y => y.Ignore())
                  .ForMember(x => x.ClientName, y => y.Ignore())
              .ForMember(x => x.BatchId, y => y.Ignore())
              .ForMember(x => x.BranchId, y => y.Ignore())
              .ForMember(x => x.Branches, y => y.Ignore())
                .ForMember(x => x.ClientId, y => y.Ignore())
              .ForMember(x => x.Clients, y => y.Ignore())
              .ForMember(x => x.Batches, y => y.Ignore())
              .ForMember(x => x.SMS, y => y.Ignore())
              .ForMember(x => x.AppNotification, y => y.Ignore())
              .ForMember(x => x.Email, y => y.Ignore())
              .ForMember(x => x.CurrentUserRole, y => y.Ignore())
              .ForMember(x => x.SelectedBatchesName, y => y.Ignore())
              .ForMember(x => x.SelectedBranchesName, y => y.Ignore());

            CreateMap<PendingStudentAdmissionProjection, PendingStudentAdmissionViewModel>();

            CreateMap<UploadOfflineMarksProjection, UploadOfflineMarksViewModel>()
                .ForMember(dest => dest.OfflineTestStudentMarksId, opts => opts.MapFrom(src => src.OfflineTestStudentMarksId))
                .ForMember(dest => dest.ObtainedMarks, opts => opts.MapFrom(src => src.ObtainedMarks))
                .ForMember(dest => dest.UserId, opts => opts.MapFrom(src => src.UserId))
                .ForMember(dest => dest.OfflineTestPaperId, opts => opts.MapFrom(src => src.OfflineTestPaperId))
                .ForMember(dest => dest.SubjectId, opts => opts.MapFrom(src => src.SubjectId)).ForMember(dest => dest.ClassId, opts => opts.MapFrom(src => src.ClassId))
                .ForMember(dest => dest.SelectedBatches, opts => opts.MapFrom(src => src.SelectedBatches))
                .ForMember(dest => dest.CreatedOn, opts => opts.MapFrom(src => src.CreatedOn))
                .ForMember(dest => dest.ClassName, opts => opts.MapFrom(src => src.ClassName))
                .ForMember(dest => dest.SubjectName, opts => opts.MapFrom(src => src.SubjectName))
                .ForMember(dest => dest.IsPresent, opts => opts.MapFrom(src => src.IsPresent))
                .ForMember(x => x.Subjects, y => y.Ignore())
                .ForMember(x => x.Classes, y => y.Ignore())
                .ForMember(x => x.BranchName, y => y.Ignore())
                   .ForMember(x => x.ClientName, y => y.Ignore())
                .ForMember(x => x.BatchId, y => y.Ignore())
                .ForMember(x => x.BranchId, y => y.Ignore())
                .ForMember(x => x.Branches, y => y.Ignore())
                    .ForMember(x => x.ClientId, y => y.Ignore())
                .ForMember(x => x.Clients, y => y.Ignore())
                .ForMember(x => x.Batches, y => y.Ignore())
                .ForMember(x => x.SMS, y => y.Ignore())
                .ForMember(x => x.AppNotification, y => y.Ignore())
                .ForMember(x => x.Email, y => y.Ignore())
                .ForMember(x => x.CurrentUserRole, y => y.Ignore())
                .ForMember(x => x.SelectedBatchesName, y => y.Ignore())
                .ForMember(x => x.SelectedBranchesName, y => y.Ignore())
                .ForMember(x => x.Papers, y => y.Ignore())
                .ForMember(x => x.StudentOfflineMarks, y => y.Ignore())
                .ForMember(x => x.StudentContact, y => y.Ignore())
                .ForMember(x => x.StudentEmail, y => y.Ignore())
                .ForMember(x => x.TotalMarks, y => y.Ignore())
                .ForMember(x => x.Percentage, y => y.Ignore())
                .ForMember(x => x.Title, y => y.Ignore());

            CreateMap<ArrangeTestResultProjection, ArrangeTestResultViewModel>();
        }
    }
}