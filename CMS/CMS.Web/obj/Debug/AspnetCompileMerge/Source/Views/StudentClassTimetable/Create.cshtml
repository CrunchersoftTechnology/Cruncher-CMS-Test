@model CMS.Domain.Storage.Projections.StudentTimetableViewModel

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<h2>Create Class Timetable</h2>
@using (Html.BeginForm("Create", "StudentClassTimetable", FormMethod.Post, new
{
    enctype = "multipart/form-data"
}))
{

    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.SelectedBatches)
    @Html.HiddenFor(m => m.SelectedClasses)
    @Html.HiddenFor(m => m.SelectedBranches)
    @Html.HiddenFor(m => m.CurrentUserRole)

    <div class="form-horizontal">
        <div id="message">
        </div>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        @if (Model.CurrentUserRole == "Admin")
        {
            <div class="form-group">
                @Html.LabelFor(m => m.Branches, htmlAttributes: new { @class = "control-label col-md-2 asterisk_input", @id = "lblBranch" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.BranchId, new SelectList(Model.Branches, "Value", "Text"),
                     new { @class = "form-control", @onchange = "FillClasses(this.value)", @multiple = "multiple" })
                    @Html.ValidationMessageFor(model => model.BranchId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group" id="classDetail">
                @Html.LabelFor(m => m.ClassId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.ClassId, new SelectList(Enumerable.Empty<SelectListItem>(),
                   "ClassId", "Name"), new { @class = "form-control", @onchange = "FillBatches(this.value)", @multiple = "multiple" })
                </div>
            </div>
        }
        else if (Model.CurrentUserRole == "BranchAdmin")
        {
            <div class="form-group">
                @Html.LabelFor(m => m.BranchName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(m => m.BranchName, new
               {
                   htmlAttributes = new
                   {
                       @class = "form-control",
                       @readonly = "readonly"
                   }
               })
                    @Html.HiddenFor(m => m.BranchId)
                </div>
            </div>

            <div class="form-group" id="classDetail">
                @Html.LabelFor(m => m.Classes, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.ClassId, new SelectList(Model.Classes, "Value", "Text"), "Select Class",
                   new { @class = "form-control", @onchange = "FillBatches(this.value)", @multiple = "multiple" })
                </div>
            </div>
        }

        <div class="form-group" id="batchDetail">
            @Html.LabelFor(m => m.BatchId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.BatchId, new SelectList(Enumerable.Empty<SelectListItem>(), "BatchId", "Name"),
                   new { @class = "form-control", @multiple = "multiple", @onchange = "getSelectedBatches()" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2 asterisk_input", @id = "lblDescription" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.StudentTimetableDate, htmlAttributes: new { @class = "control-label col-md-2 asterisk_input", @id = "lblDate" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.StudentTimetableDate, new { htmlAttributes = new { @class = "form-control datepicker", autocomplete = "off", @type = "text", @maxlength = "10", @placeholder = "DD-MM-YYYY" } })
                @Html.ValidationMessageFor(model => model.StudentTimetableDate, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.FilePath, htmlAttributes: new { @class = "control-label col-md-2", @id = "lblFilePath" })
            <div class="col-md-10">
                @Html.TextBoxFor(m => m.FilePath, new { @type = "file", @class = "file input-group-margin", @accept = "image/jpeg,image/gif,image/png,application/pdf,image/x-eps" })
                @Html.ValidationMessageFor(model => model.FilePath, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.AttachmentDescription, htmlAttributes: new { @class = "control-label col-md-2", @id = "lblDescription" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.AttachmentDescription, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @autocomplete = "off" } })
                @Html.ValidationMessageFor(model => model.AttachmentDescription, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                @Html.Label("(By default app notification send to parent)")
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" id="send" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to Class Timetable List", "Index")
</div>
@section Scripts {
    <script>

        $(document).ready(function () {
            $("#AttachmentDescription").val('');
            $('#Description').on('change', function () {
                RequiredValidation('#v', '#lblDescription')
            });

            $("#StudentTimetableDate").on('change', function () {
                RequiredValidation('#v', '#lblDate')
            });

            $('#BranchId').on('change', function () {
                RequiredValidation('#v', '#lblBranch')
            });

            if ($("#SelectedBranches").val() != "") {
                if ($("#CurrentUserRole").val() == "Admin") {
                    $('#BranchId')
                    .multiselect({
                        allSelectedText: 'All',
                        includeSelectAllOption: true
                    });

                    var arr = $("#SelectedBranches").val().split(',');
                    arr.forEach(function (i) {
                        $("#BranchId").multiselect('select', i)
                    });
                }
                getCountOnBranch();
            }

            if ($("#SelectedClasses").val() != "") {
                $('#ClassId')
                .multiselect({
                    allSelectedText: 'All',
                    includeSelectAllOption: true
                });

                var arr = $("#SelectedClasses").val().split(',');
                arr.forEach(function (i) {
                    console.log(i);
                    $("#ClassId").multiselect('select', i)
                });
                getCountOnClass();
            }

            if ($("#SelectedBatches").val() != "") {
                $('#BatchId')
                .multiselect({
                    allSelectedText: 'All',
                    includeSelectAllOption: true
                });

                var arr = $("#SelectedBatches").val().split(',');
                arr.forEach(function (i) {
                    $("#BatchId").multiselect('select', i)
                });
            }

            $('#ClassId').multiselect({
                includeSelectAllOption: true
            });

            $('#BatchId').multiselect({
                includeSelectAllOption: true
            });

            if ($("#CurrentUserRole").val() == "Admin") {
                $('#BranchId').multiselect({
                    includeSelectAllOption: true
                });
            }

            $('#FilePath').on('change', function () {
                if ($("#FilePath").val() != "") {
                    console.log("ok");
                    $("#AttachmentDescription").removeAttr("readonly");
                }
                if ($("#FilePath").val() == "") {
                    console.log("blank");
                    $("#AttachmentDescription").val('');
                    $("#AttachmentDescription").attr("readonly", "readonly");
                }
            });
        });

        function getSelectedBatches() {
            var selected = $("#BatchId").find("option:selected");
            var arrSelected = [];
            selected.each(function () {
                arrSelected.push($(this).val());
            });
            var selectedSubject = arrSelected.toString();
            $("#SelectedBatches").val(selectedSubject);
        }

        function FillClasses(branchId) {

            var selected = $("#BranchId").find("option:selected");
            var arrSelected = [];
            selected.each(function () {
                arrSelected.push($(this).val());
            });
            var selectedBranch = arrSelected.toString();
            $("#SelectedBranches").val(selectedBranch);
            if ($("#BranchId option:selected").length == 0) {
                DestroyBatches();
                DestroyClasses();
            }
            else {
                getCountOnBranch();
                DestroyBatches();
            }
        }

        function getCountOnBranch() {
            $.ajax({
                url: '/StudentTimetable/GetClassesByMultipleBranches',
                type: "GET",
                dataType: "JSON",
                data: { selectedBranch: $("#SelectedBranches").val() },
                async: false,
                success: function (data) {
                    $("#ClassId").html(""); // clear before appending new list
                    $("#ClassId").multiselect('destroy');
                    $("#BatchId").multiselect('destroy');
                    $.each(data.classes, function (i, cls) {
                        $("#ClassId").append(
                            $('<option></option>').val(cls.ClassId).html(cls.ClassName));
                    });

                    $('#ClassId')
                    .multiselect({
                        allSelectedText: 'All',
                        includeSelectAllOption: true
                    });
                }
            });
        }

        function getCountOnClass() {
            if ($("#SelectedClasses").val() != "") {
                $.ajax({
                    url: '/StudentTimetable/GetBatchesByClassId',
                    type: "GET",
                    dataType: "JSON",
                    data: { selectedClasses: $("#SelectedClasses").val(), selectedBranch: $("#SelectedBranches").val() },
                    success: function (data) {
                        var select = $("#BatchId");
                        select.children().remove();
                        $("#BatchId").html(""); // clear before appending new list
                        $("#BatchId").multiselect('destroy');
                        $.each(data.batches, function (i, sub) {
                            $("#BatchId").append("<option value='" + sub.BatchId + "'>" + sub.BatchName + "</option>");
                        });
                        //$("#BatchId").multiselect('rebuild');
                        $('#BatchId')
                        .multiselect({
                            allSelectedText: 'All',
                            includeSelectAllOption: true
                        });
                        if ($("#SelectedBatches").val() != "") {
                            var arr = $("#SelectedBatches").val().split(',');
                            arr.forEach(function (i) {
                                $("#BatchId").multiselect('select', i)
                            });
                        }
                    }
                });
            }
        }

        function FillBatches(classId) {
            var selected = $("#ClassId").find("option:selected");
            var arrSelected = [];
            selected.each(function () {
                arrSelected.push($(this).val());
            });
            var selectedClass = arrSelected.toString();
            $("#SelectedClasses").val(selectedClass);
            $("#SelectedBatches").val("");
            if ($("#SelectedClasses").val() == "") {
                DestroyBatches();
            }
            else {
                getCountOnClass();
            }
        }

        function DestroyBatches() {
            $("#BatchId").html("");
            $("#BatchId").multiselect('destroy');
            $("#BatchId").multiselect('rebuild');
        }

        function DestroyClasses() {
            $("#ClassId").html("");
            $("#ClassId").multiselect('destroy');
            $("#ClassId").multiselect('rebuild');
        }
    </script>
    @Scripts.Render("~/bundles/StudentJS")
    @Styles.Render("~/Content/StudentCSS")
}