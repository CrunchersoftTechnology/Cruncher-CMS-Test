@model CMS.Web.ViewModels.InstallmentViewModel

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}
<style>
    #InstallmentNo, #StudBatch {
        cursor: not-allowed;
    }
</style>
<hr />
<div id="msg" class="alert alert-danger hidden">
</div>
<h2>Create Payment</h2>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.Email)
    @Html.HiddenFor(m => m.CurrentUserRole)
    @Html.HiddenFor(m => m.ParentContact)
    @Html.HiddenFor(m => m.StudentContact)
    @Html.HiddenFor(m => m.ParentAppPlayerId)
    @Html.HiddenFor(m => m.RemainingFeeFinal)
    @Html.HiddenFor(m => m.BranchName)

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        @if (Model.CurrentUserRole == "Admin")
        {
            <div class="form-group">
                @Html.LabelFor(m => m.Branches, htmlAttributes: new { @class = "control-label col-md-2 asterisk_input", @id = "lblBranchId" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.BranchId, new SelectList(Model.Branches, "Value", "Text"),
                    "Select Branch", new { @class = "form-control", @onchange = "enableStudentField()" })
                    @Html.ValidationMessageFor(model => model.BranchId, "", new { @class = "text-danger" })
                </div>
            </div>
        }
        else if (Model.CurrentUserRole == "BranchAdmin")
        {
            <div class="form-group">
                @Html.LabelFor(m => m.BranchName, htmlAttributes: new { @class = "control-label col-md-2 asterisk_input", @id = "lblBranchId" })
                <div class="col-md-10">
                    @Html.EditorFor(m => m.BranchName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.BranchId, "", new { @class = "text-danger" })
                    @Html.HiddenFor(m => m.BranchId)
                </div>
            </div>
        }

        <div class="form-group">
            @Html.LabelFor(m => m.Classes, htmlAttributes: new { @class = "control-label col-md-2 asterisk_input", @id = "lblClassId" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.ClassId, (SelectList)Model.Classes, "Select Class", new { @class = "form-control", @onchange = "enableStudentField()" })
                @Html.ValidationMessageFor(model => model.ClassId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StudentName, htmlAttributes: new { @class = "control-label col-md-2 asterisk_input", @id = "lblStudentName" })
            <div class="col-md-2">
                @Html.EditorFor(m => m.StudentName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.HiddenFor(model => model.UserId)
                @Html.ValidationMessageFor(model => model.UserId, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-4">
                @Html.EditorFor(model => model.StudBatch, new { style = "cursor: not - allowed;", htmlAttributes = new { @class = "form-control full-width-input", @autocomplete = "off", @readonly = "readonly" } })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.TotalFee, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(m => m.TotalFee, new { htmlAttributes = new { style = "cursor: not - allowed;", @class = "form-control", @autocomplete = "off", @disabled = "disabled" } })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.RemainingFee, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(m => m.RemainingFee, new { htmlAttributes = new { style = "cursor: not - allowed;", @class = "form-control", @autocomplete = "off", @disabled = "disabled" } })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Payment, htmlAttributes: new { @class = "control-label col-md-2 asterisk_input", @id = "lblPayment" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Payment, new
           {
               htmlAttributes = new
               {
                   @class = "form-control",
                   @autocomplete = "off",
                   @onchange = "installationFinalFee()",
                   @maxlength = "12"
               }
           })
                @Html.ValidationMessageFor(model => model.Payment, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.ReceiptBookNumber, htmlAttributes: new { @class = "control-label col-md-2 asterisk_input", @id = "lblReceiptBookNumber" })
            <div class="col-md-10">
                @Html.EditorFor(m => m.ReceiptBookNumber, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                @Html.ValidationMessageFor(model => model.ReceiptBookNumber, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.ReceiptNumber, htmlAttributes: new { @class = "control-label col-md-2 asterisk_input", @id = "lblReceiptNumber" })
            <div class="col-md-10">
                @Html.EditorFor(m => m.ReceiptNumber, new { htmlAttributes = new { @class = "form-control", @autocomplete = "off" } })
                @Html.ValidationMessageFor(model => model.ReceiptNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.InstallmentNo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.InstallmentNo, new { style = "cursor: not - allowed;", htmlAttributes = new { @class = "form-control", @autocomplete = "off", @readonly = "readonly" } })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SMS, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox checkbox-inline">
                    @Html.EditorFor(model => model.SMS)
                    @Html.Label("( Payment SMS will be send to both Student and Parent )", new { @class = "text-default", @style = "font-weight:bold" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.AppNotification, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox checkbox-inline">
                    @Html.EditorFor(model => model.AppNotification)
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <button type="button" class="btn btn-default" id="saveInstallment">Save</button>
            </div>
        </div>
    </div>
    <div class="modal fade" id="demoModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog" style="width:450px">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h4 class="modal-title" id="myModalLabel">Save Payment</h4>
                </div>
                <div class="modal-body">Are you sure , do you want to save this ? (Only editable by Master Admin)</div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    <input id="save" type="submit" value="Save" class="btn btn-success" />
                </div>
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to Payment List", "Index")
</div>

@section Scripts
{
    @Scripts.Render("~/bundles/InstallmentJS")
    <script>
        $(document).ready(function () {
            $('#BranchId').on('change', function () {
                RequiredValidation('#BranchId', '#lblBranchId')
                $("#BranchName").val($('#BranchId :selected').text());
            });
            $('#ClassId').on('change', function () {
                RequiredValidation('#ClassId', '#lblClassId')
            });
            $('#StudentName').on('change', function () {
                RequiredValidation('#StudentName', '#lblStudentName')
            });
            $('#Payment').on('change', function () {
                RequiredValidation('#Payment', '#lblPayment')
            });
            $('#ReceiptBookNumber').on('change', function () {
                RequiredValidation('#ReceiptBookNumber', '#lblReceiptBookNumber')
            });
            $('#ReceiptNumber').on('change', function () {
                RequiredValidation('#ReceiptNumber', '#lblReceiptNumber')
            });
            $('#Name').on('change', function () {
                RequiredValidation('#Name', '#lblName')
            });
            enableStudentField();
            $("#StudentName").val("@ViewBag.StudentName");
            $("#TotalFee").val("@ViewBag.TotalFee");
            $("#RemainingFee").val("@ViewBag.RemainingFee");
            $("#InstallmentNo").val("@ViewBag.installmentCount");

            $("#StudentName").autocomplete({
                minLength: 1,
                source: function (request, response) {
                    $.getJSON("/Installment/GetStudentList", {
                        query: request.term,
                        classId: $("#ClassId").val(),
                        branchId: $("#BranchId").val()
                    }, response);
                },
                focus: function (event, ui) {
                    //$("#StudentName").val(ui.item.name);
                    return false;
                },
                select: function (event, ui) {
                    $("#StudentName").val(ui.item.name);
                    $("#UserId").val(ui.item.id);
                    $("#Email").val(ui.item.email);
                    $("#ParentContact").val(ui.item.parentContact);
                    $("#StudentContact").val(ui.item.studentContact);
                    $("#ParentAppPlayerId").val(ui.item.parentAppPlayerId);
                    uid = ui.item.id;
                    if (uid != "") {
                        getStudentFee();
                        $("#StudBatch").val(ui.item.batchName + " ( " + ui.item.batch + " )");
                    }
                    else {
                        $("#TotalFee").val(0);
                        $("#RemainingFee").val(0);
                        $("#InstallmentNo").val(0);
                    }
                    return false;
                },   //HERE - make sure to add the comma after your select
                response: function (event, ui) {
                    if (!ui.content.length) {
                        var noResult = { id: "", name: "No results found", batch: "NA", doj: "NA" };
                        ui.content.push(noResult);
                    }
                }
            }).autocomplete("instance")._renderItem = function (ul, item) {

                var studDoj = new Date(parseInt(item.doj.substr(6)));
                var studDob = new Date(parseInt(item.DOB.substr(6)));
                return $("<li>")
                  .append("<div>" + item.name + "<br> Joining : " + studDoj.format("dd/mm/yyyy") + "<br> Email: <i>" + item.email + "</i> <br> DOB: <i>" + studDob.format("dd/mm/yyyy") + "</i></div>")
                  .appendTo(ul);
            };
        });

        function getStudentFee() {
            $("#TotalFee").val(0);
            $("#RemainingFee").val(0);
            var uid = $("#UserId").val();
            $.ajax({
                url: '/Installment/GetStudentFinalFee',
                type: "GET",
                dataType: "JSON",
                data: { userId: uid },
                success: function (data) {
                    $("#InstallmentNo").val(parseInt(data.installmentCount) + 1);
                    $("#TotalFee").val(data.StudentFinalFee);
                    var remCnt = data.StudentFinalFee - data.PaidFee;
                    $("#RemainingFee").val(remCnt);
                    $("#RemainingFeeFinal").val(remCnt);
                    var totalfee = parseInt($("#TotalFee").val());
                    if (remCnt == 0) {
                        $("#RemainingFee").val(0);
                        $("#Payment").attr("readonly", "readonly");
                        $("#save").addClass("hidden");
                    }
                    else {
                        $("#Payment").removeAttr("readonly");
                        $("#save").removeClass("hidden");
                    }
                }
            });
        }

        function installationFinalFee() {
            var totalfee = parseInt($("#TotalFee").val());
            console.log($("#Payment").val());
            $("#RemainingFee").val($("#RemainingFeeFinal").val())
            var rmCnt = parseInt($("#RemainingFee").val());
            var payment = parseInt($("#Payment").val());
            if (payment > rmCnt) {
                $('#msg').html("");
                $('#msg').append('<div>' + "Payment amount is exceded!" + '</div>');
                $('#msg').removeClass("hidden");
                $("#Payment").val("");
                $("#Payment").focus();
            }
            else {
                var result = rmCnt - payment;
                $("#RemainingFee").val(result);
            }
        }

        function enableStudentField() {
            var classId = $("#ClassId").val();
            var branchId = $("#BranchId").val();
            if (classId == "" || branchId == "") {
                $("#StudentName").attr("readonly", "readonly");
                $("#TotalFee").val(0);
                $("#RemainingFee").val(0);
                $("#StudentName").val("");
                $('#msg').addClass("hidden");
            } else if (classId != "" && branchId != "") {
                $("#StudentName").removeAttr("readonly");
                $("#TotalFee").val(0);
                $("#RemainingFee").val(0);
                $("#StudentName").val("");
                $('#msg').addClass("hidden");
            }
            $(function () {
                $("#saveInstallment").click(function () {
                    $('#demoModal').modal('show');
                });
            });
        };

    </script>
}